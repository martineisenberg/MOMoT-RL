package momot.^search

import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import at.ac.tuwien.big.momot.examples.stack.StackModule
import at.ac.tuwien.big.momot.problem.unit.parameter.random.RandomIntegerValue
import at.ac.tuwien.big.momot.examples.stack.stack.StackPackage
import at.ac.tuwien.big.momot.examples.stack.stack.StackModel
import at.ac.tuwien.big.moea.util.MathUtil
import at.ac.tuwien.big.momot.^search.solution.repair.TransformationPlaceholderRepairer
import org.moeaframework.core.operator.TournamentSelection
import org.moeaframework.core.operator.OnePointCrossover
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationParameterMutation

initialization = { // register stack meta-model etc.
  StackPackage.eINSTANCE.class
}

search = {
  model = { file =  "model/model_five_stacks.xmi" }
  solutionLength = 8
  
  transformations = {
    modules = [ "model/stack.henshin" ] 
    ignoreParameters = [ // not needed in solution
      StackModule.ShiftLeft.Parameter.FROM_LOAD,
      StackModule.ShiftLeft.Parameter.TO_LOAD,
      StackModule.ShiftRight.Parameter.FROM_LOAD, 
      StackModule.ShiftRight.Parameter.TO_LOAD
    ]    
    parameterValues = { // values for user parameters
      StackModule.ShiftLeft.Parameter.AMOUNT  : new RandomIntegerValue(1, 5)
      StackModule.ShiftRight.Parameter.AMOUNT : new RandomIntegerValue(1, 5)
    }
  }
  
  fitness = {
    objectives = { 
       StandardDeviation : minimize { 
         MathUtil.getStandardDeviation((root as StackModel).stacks.map[load])
       }
       SolutionLength   : minimize new TransformationLengthDimension
    }
    solutionRepairer = new TransformationPlaceholderRepairer
  }
  
  algorithms = {
     Random  : moea.createRandomSearch()
     NSGA_II  : moea.createNSGAII(
             new TournamentSelection(2),
             new OnePointCrossover(1.0), 
          new TransformationPlaceholderMutation(0.15),
          new TransformationParameterMutation(0.1, orchestration.moduleManager))
     NSGA_III  : moea.createNSGAIII(
             4,
             new TournamentSelection(2),
             new OnePointCrossover(1.0), 
          new TransformationPlaceholderMutation(0.15),
          new TransformationParameterMutation(0.1, orchestration.moduleManager))
  }  
}

experiment = {
  populationSize    = 100
  maxEvaluations    = 5000
  nrRuns            = 5
  progressListeners = [ new SeedRuntimePrintListener ]
}
  
analysis = {
  indicators   = [ hypervolume additiveEpsilonIndicator maximumParetoFrontError  ]
  significance = 0.01
  show         = [ individualValues aggregateValues statisticalSignificance ]
}
  
results = {	
	objectives = {
		printOutput
	}
	
	objectives = {
		outputFile = "output/overall_objectives.pf"
		printOutput
	}
	
	objectives = {
		algorithms = [ NSGA_III, NSGA_II ]
		outputFile = "output/moea_objectives.pf"
		printOutput
	}
	
	objectives = {
		algorithms = [ NSGA_III, NSGA_II ]
		neighborhoodSize = 3 // kneepoints
		outputFile = "output/moea_kneepoints_objectives.pf"
		printOutput
	}
	
	solutions = {
		outputFile = "output/overall_solutions.txt"
		outputDirectory ="output/solutions/all/"
	}
	
	solutions = {
		algorithms = [ NSGA_III, NSGA_II ]
		outputFile = "output/moea_solutions.txt"
		outputDirectory ="output/solutions/moea/"
	}
	
	solutions = {
		algorithms = [ NSGA_III, NSGA_II ]
		neighborhoodSize = maxNeighborhoodSize  // kneepoint
		outputFile = "output/solutions/moea_kneepoint_solutions.txt"
		outputDirectory ="output/solutions/moea/kneepoints/"
		printOutput
	}
	
	models = {
		outputDirectory = "output/models/testing ladida"
		printOutput
	}
	
	models = {
		algorithms = [ NSGA_III, NSGA_II ]
		outputDirectory = "output/models/moea/"
	}
	
	models = {
		algorithms = [ Random ]
		outputDirectory = "output/models/random/"
	}
}	

finalization = {
	System.out.println("Search finished.");
}